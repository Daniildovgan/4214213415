#include <iostream>
#include <vector>

void rotateMatrix(std::vector<std::vector<int>>& matrix, int rotations, char direction) {
    int m = matrix.size();
    int n = matrix[0].size();
    
    rotations = rotations % (m * n);
    if (rotations < 0) rotations += m * n;

    if (direction == 'L') {
        for (int k = 0; k < rotations; ++k) {
            int temp = matrix[0][0];
            for (int i = 0; i < m; ++i) {
                for (int j = 0; j < n - 1; ++j) {
                    matrix[i][j] = matrix[i][j + 1];
                }
            }
            for (int i = 0; i < m - 1; ++i) {
                matrix[i][n - 1] = matrix[i + 1][n - 1];
            }
            for (int i = m - 1; i > 0; --i) {
                matrix[i][0] = matrix[i - 1][0];
            }
            matrix[1][0] = temp;
        }
    } else if (direction == 'R') {
        for (int k = 0; k < rotations; ++k) {
            int temp = matrix[m - 1][n - 1];
            for (int i = m - 1; i >= 0; --i) {
                for (int j = n - 1; j > 0; --j) {
                    matrix[i][j] = matrix[i][j - 1];
                }
            }
            for (int i = m - 1; i > 0; --i) {
                matrix[i][0] = matrix[i - 1][0];
            }
            for (int j = 0; j < n - 1; ++j) {
                matrix[0][j] = matrix[0][j + 1];
            }
            matrix[0][n - 2] = temp;
        }
    }
}

int main() {
    std::vector<std::vector<int>> matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
    int rotations = 1;
    char direction = 'L';

    rotateMatrix(matrix, rotations, direction);

    for (const auto& row : matrix) {
        for (int num : row) {
            std::cout << num << " ";
        }
        std::cout << std::endl;
    }

    return 0;
}
